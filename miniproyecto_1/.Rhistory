scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[3])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia")
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[3])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia")
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[4])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia")
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[4])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia")+
theme(legend.position = "none")
tabla_frecuencia <- table(muestra$programa)
# Crear el gráfico de barras
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
geom_text(aes(label = tabla_frecuencia), stat = "count", vjust = -0.5, color = "black", size = 4) +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[3])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia") +
theme(legend.position = "none")
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[4])
) +
labs(title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia")+
theme(legend.position = "none")
datos_2 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_2")
muestra <- datos_2 %>% sample_n(size = 40, replace = FALSE)
muestra %>%
summarise(Promedio = mean(puntaje_mat, na.rm = TRUE),
DE = sd(puntaje_mat, na.rm = TRUE),
Mediana = median(puntaje_mat, na.rm = TRUE),
CV = DE / Promedio * 100,
Minimo = min(puntaje_mat, na.rm = TRUE),
Maximo = max(puntaje_mat, na.rm = TRUE))
muestra %>%
summarise(Promedio = mean(num_premios, na.rm = TRUE),
DE = sd(num_premios, na.rm = TRUE),
Mediana = median(num_premios, na.rm = TRUE),
CV = DE / Promedio * 100,
Minimo = min(num_premios, na.rm = TRUE),
Maximo = max(num_premios, na.rm = TRUE))
View(muestra)
names(muestra)
modelo_poisson <- glm(num_premios ~ programa + puntaje_mat ,family = poisson(link = "log"), data = datos_2)
summary(modelo_poisson)
modelo_poisson <- glm.nb(num_premios ~ programa + puntaje_mat ,family = poisson(link = "log"), data = datos_2)
glm
modelo_poisson <- glm(num_premios ~ programa + puntaje_mat ,family = poisson(link = "log"), data = datos_2)
summary(modelo_poisson)
lm(num_premios ~ programa + puntaje_mat, data = datos_2)
summary(lm(num_premios ~ programa + puntaje_mat, data = datos_2))
summary(modelo_poisson)
datos_3 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_3")
View(modelo_poisson)
View(datos_3)
muestra3 <- datos_3 %>% sample_n(size = 11, replace = FALSE)
# Cargar las bibliotecas necesarias
library(openxlsx)
library(dplyr)
library(ggplot2)
library(flexmix)
# Parte 1: Proporción de Malformaciones por Consumo de Alcohol
setwd("C:\\Users\\sampi\\OneDrive\\Documentos\\UAO\\semestre_5\\Estadistica_2\\Stadistic\\miniproyecto_1")
datos_1 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_1")
datos_1$Proporcion.Presente <- datos_1$Frec.Presente / (datos_1$Frec.Presente + datos_1$Frec.Ausente)
ggplot(datos_1, aes(x = Alcohol, y = Proporcion.Presente)) +
geom_point(color = "#016A70") +
labs(
title = "Proporción de Malformaciones por Consumo de Alcohol",
x = "Alcohol",
y = "Proporción de Presente"
)
modelo_logit <- glm(cbind(Frec.Presente, Frec.Ausente) ~ Alcohol, family = binomial(link = logit), data = datos_1)
summary(modelo_logit)
modelo_logit$coefficients
round(modelo_logit$coefficients,2)
modelo_probit <- glm(cbind(Frec.Presente, Frec.Ausente) ~ Alcohol, family = binomial(link = "probit"), data = datos_1)
round(modelo_probit$coefficients,2)
# Ajustar un modelo de regresión lineal
modelo_lineal <- lm(Proporcion.Presente ~ Alcohol, data = datos_1)
round(modelo_lineal$coefficients,2)
round(modelo_lineal$coefficients,4)
list(dev.residual = deviance(modelo_logit),
gl = df.residual(modelo_logit),
valor.p = pchisq(deviance(modelo_logit), df.residual(modelo_logit), lower = FALSE))
list(dev.residual = deviance(modelo_probit),
gl = df.residual(modelo_probit),
valor.p = pchisq(deviance(modelo_probit), df.residual(modelo_probit), lower = FALSE))
list(dev.residual = deviance(modelo_lineal),
gl = df.residual(modelo_lineal),
valor.p = pchisq(deviance(modelo_lineal), df.residual(modelo_lineal), lower = FALSE))
source("~/.active-rstudio-document")
View(resultados_devianza)
tabla_resultados <- data.frame(
Modelo = c("Modelo Logit", "Modelo Probit", "Modelo Lineal"),
BIC = c(BIC(modelo_logit), BIC(modelo_probit), BIC(modelo_lineal)),
AIC = c(AIC(modelo_logit), AIC(modelo_probit), AIC(modelo_lineal)),
Devianza = c(dev_logit$dev.residual, dev_probit$dev.residual, dev_lineal$dev.residual)
)
source("~/.active-rstudio-document")
View(modelo_probit)
View(tabla_resultados)
round(tabla_resultados$AIC,2)
round(tabla_resultados$BIC,2)
round(tabla_resultados$Devianza,2)
round(tabla_resultados$Devianza,4)
round(tabla_resultados$Devianza,6)
ggplot(datos_1, aes(x = Alcohol)) +
geom_line(aes(y = Proporcion.Presente_Logistico, color = "Logistico"), linetype = "F1", lwd = 1) +
geom_line(aes(y = Proporcion.Presente_Probit, color = "Probit"), linetype = "dashed", lwd = 1) +
geom_line(aes(y = Proporcion.Presente_Lineal, color = "Lineal"), linetype = "longdash", lwd = 1) +
geom_point(aes(y = Proporcion.Presente)) +
labs(
title = "Comparación de Modelos",
x = "Alcohol",
y = "Proporción de Presente"
) +
scale_color_manual(
values = c("Logistico" = colores[4], "Probit" = colores[2], "Lineal" = colores[1]),
labels = c("Logístico", "Probit", "Lineal")
) +
guides(
color = guide_legend(title = "Modelo")
)
ggplot(datos_1, aes(x = Alcohol)) +
geom_line(aes(y = Proporcion.Presente_Logistico, color = "Logistico"), linetype = "F1", lwd = 1) +
geom_line(aes(y = Proporcion.Presente_Probit, color = "Probit"), linetype = "dashed", lwd = 1) +
geom_line(aes(y = Proporcion.Presente_Lineal, color = "Lineal"), linetype = "longdash", lwd = 1) +
geom_point(aes(y = Proporcion.Presente)) +
labs(
title = "Comparación de Modelos",
x = "Alcohol",
y = "Proporción de Presente"
) +
scale_color_manual(
values = c("Logistico" = "#A2C579", "Probit" = "#016A70", "Lineal" = "#D2DE32"),
labels = c("Logístico", "Probit", "Lineal")
) +
guides(
color = guide_legend(title = "Modelo")
)
View(datos_1)
source("~/.active-rstudio-document")
View(tabla_predicciones)
"#D2DE32"
source("~/UAO/semestre_5/Estadistica_2/Stadistic/miniproyecto_1/probit.R")
source("~/UAO/semestre_5/Estadistica_2/Stadistic/miniproyecto_1/probit.R")
rmse(datos_1$Proporcion.Presente, datos_1$Proporcion.Presente_Logistico)
rmse(datos_1$Proporcion.Presente, datos_1$Proporcion.Presente_Probit)
rmse(datos_1$Proporcion.Presente, datos_1$Proporcion.Presente_Lineal)
View(datos_1)
View(datos_1)
predicciones_logit <- (datos_1$Frec.Presente + datos_1$Frec.Ausente) * datos_1$Proporcion.Presente_Logistico
source("~/.active-rstudio-document")
View(tabla_predicciones)
# Leer los datos desde el archivo "Datos_MP1.xlsx" en la hoja "Datos_2"
datos_2 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_2")
# Tomar una muestra de 40 observaciones sin reemplazo
muestra <- datos_2 %>% sample_n(size = 40, replace = FALSE)
# Resumen estadístico de num_premios y puntaje_mat
resumen_estadistico <- data.frame(
Variable = c("num_premios", "puntaje_mat"),
Promedio = c(mean(muestra$num_premios, na.rm = TRUE), mean(muestra$puntaje_mat, na.rm = TRUE)),
DE = c(sd(muestra$num_premios, na.rm = TRUE), sd(muestra$puntaje_mat, na.rm = TRUE)),
Mediana = c(median(muestra$num_premios, na.rm = TRUE), median(muestra$puntaje_mat, na.rm = TRUE)),
CV = c(sd(muestra$num_premios, na.rm = TRUE) / mean(muestra$num_premios, na.rm = TRUE) * 100,
sd(muestra$puntaje_mat, na.rm = TRUE) / mean(muestra$puntaje_mat, na.rm = TRUE) * 100),
Minimo = c(min(muestra$num_premios, na.rm = TRUE), min(muestra$puntaje_mat, na.rm = TRUE)),
Maximo = c(max(muestra$num_premios, na.rm = TRUE), max(muestra$puntaje_mat, na.rm = TRUE))
)
View(resumen_estadistico)
ggplot(muestra, aes(x = num_premios)) +
geom_histogram(fill = "#016A70", color = "black", bins = 15) +
labs(
title = "Distribución de num_premios",
x = "Número de Premios",
y = "Frecuencia"
)
ggplot(muestra, aes(x = num_premios)) +
geom_bar(fill = "#016A70", color = "black", bins = 15) +
labs(
title = "Distribución de num_premios",
x = "Número de Premios",
y = "Frecuencia"
)
ggplot(muestra, aes(x = puntaje_mat)) +
geom_histogram(fill = "#A2C579", color = "black", bins = 15) +
labs(
title = "Distribución de puntaje_mat",
x = "Puntaje",
y = "Frecuencia"
)
# Tabla de fr
ggplot(muestra, aes(x = factor(num_premios))) +
geom_bar(fill = "#016A70", color = "black") +
labs(
title = "Distribución de num_premios",
x = "Número de Premios",
y = "Frecuencia"
)
ggplot(muestra, aes(y = puntaje_mat)) +
geom_boxplot(fill = "#016A70", color = "black") +
labs(
title = "Distribución de puntaje_mat",
x = "",
y = "Puntaje Matemáticas"
)
ggplot(muestra, aes(y = puntaje_mat)) +
geom_histogram(fill = "#016A70", color = "black") +
labs(
title = "Distribución de puntaje_mat",
x = "",
y = "Puntaje Matemáticas"
)
# Boxplot para puntaje_mat
ggplot(muestra, aes(x = puntaje_mat)) +
geom_histogram(fill = "#016A70", color = "black") +
labs(
title = "Distribución de puntaje_mat",
x = "",
y = "Puntaje Matemáticas"
)
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = colores[1], "General" = colores[2], "Vocacional" = colores[4])
) +
labs(
title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia"
) +
theme(legend.position = "none")
# Boxplot para puntaje_mat
ggplot(muestra, aes(y = puntaje_mat)) +
geom_boxplot(fill = "#016A70", color = "black") +
labs(
title = "Distribución de puntaje_mat",
x = "",
y = "Puntaje Matemáticas"
)
# Gráfico de barras de la distribución de programas
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = "#A2C579", "General" = "#016A70", "Vocacional" = "#D2DE32")
) +
labs(
title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia"
) +
theme(legend.position = "none")
# Resumen estadístico de num_premios y puntaje_mat
resumen_estadistico <- data.frame(
Variable = c("num_premios", "puntaje_mat"),
Promedio = c(mean(muestra$num_premios, na.rm = TRUE), mean(muestra$puntaje_mat, na.rm = TRUE)),
DE = c(sd(muestra$num_premios, na.rm = TRUE), sd(muestra$puntaje_mat, na.rm = TRUE)),
Mediana = c(median(muestra$num_premios, na.rm = TRUE), median(muestra$puntaje_mat, na.rm = TRUE)),
CV = c(sd(muestra$num_premios, na.rm = TRUE) / mean(muestra$num_premios, na.rm = TRUE) * 100,
sd(muestra$puntaje_mat, na.rm = TRUE) / mean(muestra$puntaje_mat, na.rm = TRUE) * 100),
Minimo = c(min(muestra$num_premios, na.rm = TRUE), min(muestra$puntaje_mat, na.rm = TRUE)),
Maximo = c(max(muestra$num_premios, na.rm = TRUE), max(muestra$puntaje_mat, na.rm = TRUE))
)
View(resumen_estadistico)
round(resumen_estadistico,2)
round(0.7778999,2)
round(129.64998,2)
ggplot(muestra, aes(x = factor(num_premios))) +
geom_bar(fill = "#016A70", color = "black") +
labs(
title = "Distribución de num_premios",
x = "Número de Premios",
y = "Frecuencia"
)
round(
10.1601282,2)
round(19.00866
,2)
# Boxplot para puntaje_mat
ggplot(muestra, aes(y = puntaje_mat)) +
geom_boxplot(fill = "#016A70", color = "black") +
labs(
title = "Distribución de puntaje_mat",
x = "",
y = "Puntaje Matemáticas"
)
# Tabla de frecuencia de la variable "programa"
table(muestra$programa)
# Gráfico de barras de la distribución de programas
ggplot(muestra, aes(x = factor(programa), fill = programa)) +
geom_bar(stat = "count") +
scale_fill_manual(
values = c("Academico" = "#A2C579", "General" = "#016A70", "Vocacional" = "#D2DE32")
) +
labs(
title = "Distribución de Programas",
x = "Programa",
y = "Frecuencia"
) +
theme(legend.position = "none")
datos_3 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_3")
muestra3 <- datos_3 %>% sample_n(size = 11, replace = FALSE)
View(muestra3)
names(muestra3)
resumen_estadistico <- data.frame(
Variable = c("asistencia_miles", "num_arrestos", "inv_social_millones"),
Promedio = c(mean(muestra3$asistencia_miles), mean(muestra3$num_arrestos), mean(muestra3$inv_social_millones)),
DE = c(sd(muestra3$asistencia_miles), sd(muestra3$num_arrestos), sd(muestra3$inv_social_millones)),
Mediana = c(median(muestra3$asistencia_miles), median(muestra3$num_arrestos), median(muestra3$inv_social_millones)),
CV = c(sd(muestra3$asistencia_miles) / mean(muestra3$asistencia_miles) * 100,
sd(muestra3$num_arrestos) / mean(muestra3$num_arrestos) * 100,
sd(muestra3$inv_social_millones) / mean(muestra3$inv_social_millones) * 100),
Minimo = c(min(muestra3$asistencia_miles), min(muestra3$num_arrestos), min(muestra3$inv_social_millones)),
Maximo = c(max(muestra3$asistencia_miles), max(muestra3$num_arrestos), max(muestra3$inv_social_millones))
)
# Gráfico de distribución para asistencia_miles
ggplot(muestra3, aes(x = asistencia_miles)) +
geom_histogram(fill = "#016A70", color = "black", bins = 15) +
labs(
title = "Distribución de asistencia_miles",
x = "Asistencia en Miles",
y = "Frecuencia"
)
# Boxplot para num_arrestos
ggplot(muestra3, aes(y = num_arrestos)) +
geom_boxplot(fill = "#016A70", color = "black") +
labs(
title = "Distribución de num_arrestos",
x = "",
y = "Número de Arrestos"
)
# Gráfico de distribución para inv_social_millones
ggplot(muestra3, aes(x = inv_social_millones)) +
geom_histogram(fill = "#016A70", color = "black", bins = 15) +
labs(
title = "Distribución de inv_social_millones",
x = "Inversión Social en Millones",
y = "Frecuencia"
)
View(resumen_estadistico)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = datos_2)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = datos_3)
summary(modelo_poisson)
modelo_lineal <- lm(num_arrestos ~  inv_social_millones + asistencia_miles, data = datos_3)
summary(modelo_lineal)
modelo_lineal_simple <- lm(num_arrestos ~  inv_social_millones, data = datos_3)
summary(modelo_lineal_simple)
muestra3$proporcion_arrestos <- muestra3$num_arrestos / (muestra3$asistencia_miles*1000)
View(muestra3)
# Parte 3: Número de Arrestos en Equipos de Fútbol
datos_3 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_3")
muestra3 <- datos_3 %>% sample_n(size = 11, replace = FALSE)
datos$asistencia_miles <- datos$asistencia_miles * 1000
muestra3$asistencia_miles <- datos$asistencia_miles * 1000
muestra3$proporcion_arrestos <- muestra3$num_arrestos / muestra3$asistencia_miles
# Parte 3: Número de Arrestos en Equipos de Fútbol
datos_3 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_3")
muestra3 <- datos_3 %>% sample_n(size = 11, replace = FALSE)
muestra3$proporcion_arrestos <- muestra3$num_arrestos / muestra3$asistencia_miles
View(datos_3)
View(muestra3)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles + inv_social_millones, family = binomial(link = logit), data = datos_1)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles + inv_social_millones, family = binomial(link = logit), data = datos_3)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra_3)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
modelo_lineal <- lm(num_arrestos ~  inv_social_millones + asistencia_miles, data = muestra3)
modelo_lineal_simple <- lm(num_arrestos ~  inv_social_millones, data = muestra3)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles + inv_social_millones, family = binomial(link = logit), data = muestra3)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles + inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
muestra3$proporcion_arrestos_logistico <- fitted.values(modelo_logit)
View(muestra3)
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
predicciones_logit
summary(modelo_lineal_simple)
summary(modelo_logit)
summary(modelo_lineal)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + asistencia_miles,family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles + inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
modelo_logit <- glm(proporcion_arrestos ~ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
modelo_logit <- glm(proporcion_arrestos ~ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
modelo_lineal <- lm(num_arrestos ~  inv_social_millones + asistencia_miles, data = muestra3)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_lineal <- lm(num_arrestos ~  inv_social_millones + asistencia_miles, data = muestra3)
summary(modelo_lineal)
modelo_lineal_simple <- lm(num_arrestos ~  inv_social_millones, data = muestra3)
summary(modelo_lineal_simple)
muestra3$proporcion_arrestos <- muestra3$num_arrestos / muestra3$asistencia_miles
modelo_logit <- glm(proporcion_arrestos ~ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
set.seed(1)
# Parte 3: Número de Arrestos en Equipos de Fútbol
datos_3 <- read.xlsx("Datos_MP1.xlsx", sheet = "Datos_3")
muestra3 <- datos_3 %>% sample_n(size = 11, replace = FALSE)
modelo_poisson <- glm(num_arrestos ~  inv_social_millones + offset(log(asistencia_miles)),family = poisson(link = "log"), data = muestra3)
summary(modelo_poisson)
modelo_lineal <- lm(num_arrestos ~  inv_social_millones + asistencia_miles, data = muestra3)
summary(modelo_lineal)
modelo_lineal_simple <- lm(num_arrestos ~  inv_social_millones, data = muestra3)
summary(modelo_lineal_simple)
modelo_logit <- glm(proporcion_arrestos ~ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
muestra3$proporcion_arrestos <- muestra3$num_arrestos / muestra3$asistencia_miles
modelo_logit <- glm(proporcion_arrestos ~ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
muestra3$proporcion_arrestos_logistico <- fitted.values(modelo_logit)
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
View(muestra3)
modelo_logit <- glm(proporcion_arrestos ~ asistencia_miles+ inv_social_millones, family = binomial(link = logit), data = muestra3, weights = asistencia_miles)
summary(modelo_logit)
summary(modelo_logit)
muestra3$proporcion_arrestos_logistico <- fitted.values(modelo_logit)
predicciones_logit <- muestra3$asistencia_miles * muestra3$proporcion_arrestos_logistico
View(modelo_lineal)
View(modelo_logit)
View(modelo_poisson)
# Crear una tabla de comparación de modelos
tabla_resultados <- data.frame(
Modelo = c("Modelo Poisson", "Modelo Lineal Completo", "Modelo Lineal Simple", "Modelo Logit"),
AIC = c(AIC(modelo_poisson), AIC(modelo_lineal), AIC(modelo_lineal_simple), AIC(modelo_logit)),
BIC = c(BIC(modelo_poisson), BIC(modelo_lineal), BIC(modelo_lineal_simple), BIC(modelo_logit)),
Devianza = c(deviance(modelo_poisson), dev_lineal$dev.residual, deviance(modelo_lineal_simple), deviance(modelo_logit))
)
# Crear una tabla de comparación de modelos
tabla_resultados <- data.frame(
Modelo = c("Modelo Poisson", "Modelo Lineal Completo", "Modelo Lineal Simple", "Modelo Logit"),
AIC = c(AIC(modelo_poisson), AIC(modelo_lineal), AIC(modelo_lineal_simple), AIC(modelo_logit)),
BIC = c(BIC(modelo_poisson), BIC(modelo_lineal), BIC(modelo_lineal_simple), BIC(modelo_logit)),
Devianza = c(deviance(modelo_poisson), deviance(modelo_lineal), deviance(modelo_lineal_simple), deviance(modelo_logit))
)
View(tabla_resultados)
# Crear una tabla de comparación de modelos
tabla_resultados <- data.frame(
Modelo = c("Modelo Poisson", "Modelo Lineal Completo", "Modelo Lineal Simple", "Modelo Logit"),
AIC = c(AIC(modelo_poisson), AIC(modelo_lineal), AIC(modelo_lineal_simple), AIC(modelo_logit)),
BIC = c(BIC(modelo_poisson), BIC(modelo_lineal), BIC(modelo_lineal_simple), BIC(modelo_logit)),
Devianza = c(deviance(modelo_poisson), deviance(modelo_lineal), deviance(modelo_lineal_simple), deviance(modelo_logit)),
GL = c(df.residual(modelo_poisson), df.residual(modelo_lineal), df.residual(modelo_lineal_simple), df.residual(modelo_logit))
)
View(tabla_resultados)
# Crear una tabla con las predicciones de cada modelo
tabla_predicciones <- data.frame(
Modelo = c("Modelo Poisson", "Modelo Lineal Completo", "Modelo Lineal Simple", "Modelo Logit"),
Predicciones = c(predict(modelo_poisson), predict(modelo_lineal), predict(modelo_lineal_simple), predicciones_logit)
)
View(tabla_predicciones)
# Crear una tabla con las predicciones de cada modelo
tabla_predicciones <- data.frame(
Modelo = rep(c("Modelo Poisson", "Modelo Lineal Completo", "Modelo Lineal Simple", "Modelo Logit"), each = nrow(muestra3)),
Predicciones = c(predict(modelo_poisson), predict(modelo_lineal), predict(modelo_lineal_simple), predicciones_logit)
)
View(tabla_resultados)
View(tabla_resultados)
View(tabla_resultados)
View(tabla_resultados)
View(tabla_predicciones)
tabla_predicciones <- data.frame(
Modelo_Poisson = predict(modelo_poisson),
Modelo_Linea_Completo = predict(modelo_lineal),
Modelo_Linea_Simple = predict(modelo_lineal_simple),
Modelo_Logit = predicciones_logit
)
View(tabla_predicciones)
View(modelo_poisson)
tabla_predicciones <- data.frame(
Modelo_Poisson = modelo_poisson$fitted.values,
Modelo_Linea_Completo = modelo_lineal$fitted.values,
Modelo_Linea_Simple = modelo_lineal_simple$fitted.values,
Modelo_Logit = predicciones_logit
)
View(tabla_predicciones)
