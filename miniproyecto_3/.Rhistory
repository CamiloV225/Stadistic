autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(modelo_sarima_2, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
fit.auto <- auto.arima(consumo_ts)
pronostico_arma_1 <- forecast(fit.auto, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(fit.auto, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
fit.auto <- auto.arima(consumo_ts)
summary(fit.auto)
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,0,0)", "ARIMA(0,0,1)", "ARIMA(0,0,2)", "ARIMA(1,0,1)", "ARIMA(1,0,2)"),
AIC = c(AIC(modelo_ar1), AIC(modelo_ma1), AIC(modelo_ma2), AIC(modelo_arma_1), AIC(modelo_arma_2)),
BIC = c(BIC(modelo_ar1), BIC(modelo_ma1), BIC(modelo_ma2), BIC(modelo_arma_1), BIC(modelo_arma_2))
)
resumen_tabla
fit.auto
fit.auto <- auto.arima(consumo_ts)
fit.auto <- auto.arima(consumo_ts)
pronostico_arma_1 <- forecast(fit.auto, h=6)
fit.auto <- auto.arima(consumo_ts)
pronostico_arma_1 <- forecast(fit.auto, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(fit.auto, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
resumen_tabla
AIC(fit.auto)
BIC(fit.auto)
fit.auto
AIC(fit.auto)
BIC(fit.auto)
modelo_sarima_1
modelo_sarima_4
#Pronostico
pronostico_arma_1 <- forecast(modelo_sarima_4, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
AIC(modelo_sarima_4)
BIC(modelo_sarima_4)
resumen_tabla
consumo_df <- read_excel('Consumo.xlsx')
colnames(consumo_df) <- tolower(colnames(consumo_df))
consumo_ts <- ts(consumo_df$consumo, start = 1970, frequency=4)
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts)
#Pronostico
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
adf.test(modelo_arma_1$residuals)
#2. Normalidad
shapiro.test(modelo_arma_1$residuals)
Box.test(modelo_arma_1$residuals, type="Ljung-Box")
# Utilice la función auto.arima para encontrar automáticamente el mejor modelo ARIMA
fit.auto <- auto.arima(consumo_ts) # El mejor modelo encontrado es ARIMA(1,0,3)(1,0,1)[4]
#Pronostico
pronostico_arma_1 <- forecast(fit.auto, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
resumen_tabla
Box.test(modelo_arma_1$residuals, type="Ljung-Box")
adf.test(modelo_arma_1$residuals)
#2. Normalidad
shapiro.test(modelo_arma_1$residuals)
Box.test(modelo_arma_1$residuals, type="Ljung-Box")
# Leyendo datos desde un archivo Excel
viviendas_df <- read_excel('Viviendas.xlsx', col_types = c("date", "numeric"))
colnames(viviendas_df) <- tolower(colnames(viviendas_df))
viviendas_ts <- ts(viviendas_df$viviendas, start = 1959, frequency=12)
# Análisis exploratorio de datos (EDA)
autoplot(viviendas_ts) +
labs(x = "Tiempo", y = "Número Viviendas", title = "")
# Análisis exploratorio de datos (EDA)
autoplot(viviendas_ts) +
labs(x = "Tiempo", y = "Número Viviendas", title = "")
boxplot(viviendas_ts ~ cycle(viviendas_ts),
xlab = "Periodo",
ylab = "Número Viviendas")
autoplot(decompose(viviendas_ts)) +
labs(x = "Tiempo", title = "")
decompose(viviendas_ts)
autoplot(viviendas_ts-decompose(viviendas_ts)$trend)
autoplot(decompose(viviendas_ts, type = "mult")) +
labs(x = "Tiempo", title = "")
# Realizar la prueba ADF en viviendas_ts
adf.test(viviendas_ts)
# Crear una serie de tiempo diferenciada de primer orden
viviendas_diff1 <- diff(viviendas_ts, 1)
par(mfrow = c(1,2))
plot(viviendas_ts, main = "Serie de Tiempo Original", ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, main = "Primera Diferencia", ylab = "Diferencia")
par(mfrow = c(1,2))
plot(viviendas_ts, main = "Serie de Tiempo Original", ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, main = "Primera Diferencia", ylab = "Diferencia", xlab= "Tiempo")
plot(viviendas_ts, main = "Serie de Tiempo Original", ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, main = "Primera Diferencia", ylab = "Diff(# Viviendas)", xlab= "Tiempo")
erencia
par(mfrow = c(1,2))
plot(viviendas_ts, main = "Serie de Tiempo Original", ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, main = "Primera Diferencia", ylab = "diff(viviendas_ts, 1)", xlab= "Tiempo")
par(mfrow = c(1,2))
plot(viviendas_ts, ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, ylab = "diff(viviendas_ts, 1)", xlab= "Tiempo")
plot(viviendas_ts, main = "Serie de Tiempo Original", ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, main = "Primera Diferencia", ylab = "diff(viviendas_ts, 1)", xlab= "Tiempo")
par(mfrow = c(1,2))
plot(viviendas_ts, ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, ylab = "Diferencia", xlab= "Tiempo")
par(mfrow = c(1,2))
plot(viviendas_ts, ylab = "Número Viviendas", xlab= "Tiempo")
plot(viviendas_diff1, ylab = "diff(viviendas_ts, 1)", xlab= "Tiempo")
adf.test(viviendas_diff1)
par(mfrow = c(1,2))
acf(viviendas_diff1, main = "FAC",ylim=c(-1, 1))
pacf(viviendas_diff1, main = "FACP",ylim=c(-1, 1))
#Una forma de eliminar la estacionalidad de los datos, restamos el componente estacional de la serie original(media cero) y luego lo diferenciamos para que sea estacionario ( varianza constante e independiente).
viviendas_componentes = decompose(viviendas_ts)
viviendas_ajustada  <- viviendas_ts - viviendas_componentes$seasonal
viviendas_ajustada <- diff(viviendas_ajustada, 1)
plot(viviendas_ajustada, main = "Primera Diferencia de Viviendas (Estacionalidad Eliminada)", ylab = "Diferencia")
plot(viviendas_ajustada, main = "Primera Diferencia de Viviendas (Estacionalidad Eliminada)", ylab = "Diferencia")
plot(viviendas_ajustada, ylab = "diff(viviendas_ts - decompose(viviendas_ts)$seasonal, 1)")
plot(viviendas_ajustada, main = "Primera Diferencia de Viviendas (Estacionalidad Eliminada)", ylab = "Diferencia")
plot(viviendas_diferencia, ylab = "Diferencia de Número de viviendas")
viviendas_ajustada <- diff(viviendas_ajustada, 1)
plot(viviendas_diferencia, ylab = "Diferencia de Número de viviendas")
plot(viviendas_ajustada, ylab = "Diferencia de Número de viviendas")
par(mfrow = c(1,2))
acf(viviendas_ajustada, main = "FAC",ylim=c(-1, 1))
pacf(viviendas_ajustada, main = "FACP",ylim=c(-1, 1))
#Una forma de eliminar la estacionalidad de los datos, restamos el componente estacional de la serie original(media cero) y luego lo diferenciamos para que sea estacionario ( varianza constante e independiente).
viviendas_componentes = decompose(viviendas_ts)
viviendas_ajustada  <- viviendas_ts - viviendas_componentes$seasonal
viviendas_ajustada <- diff(viviendas_ajustada, 1)
plot(viviendas_ajustada, ylab = "Diferencia de Número de viviendas")
adf.test(viviendas_ajustada)
par(mfrow = c(1,2))
acf(viviendas_ajustada, main = "FAC",ylim=c(-1, 1))
pacf(viviendas_ajustada, main = "FACP",ylim=c(-1, 1))
modelo_sarima_1 <- arima(viviendas_ts, order=c(1,1,1), seasonal = list(order = c(1,0,0), period = 12), method="ML")
modelo_sarima_2 <- arima(viviendas_ts, order=c(2,1,1), seasonal = list(order = c(1,0,0), period = 12), method="ML")
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,1,1)(1,0,0)", "ARIMA(2,1,1)(1,0,0)"),
AIC = c(AIC(modelo_sarima_1), AIC(modelo_sarima_2)),
BIC = c(BIC(modelo_sarima_1), BIC(modelo_sarima_2))
)
resumen_tabla
xtable(resumen_tabla)
pronostico_sarima
modelo_sarima_1 <- arima(viviendas_ts, order=c(1,1,1), seasonal = list(order = c(1,0,0), period = 12), method="ML")
modelo_sarima_2 <- arima(viviendas_ts, order=c(2,1,1), seasonal = list(order = c(1,0,0), period = 12), method="ML")
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,1,1)(1,0,0)", "ARIMA(2,1,1)(1,0,0)"),
AIC = c(AIC(modelo_sarima_1), AIC(modelo_sarima_2)),
BIC = c(BIC(modelo_sarima_1), BIC(modelo_sarima_2))
)
xtable(resumen_tabla)
adf.test(modelo_sarima_2$residuals)
#2. Normalidad
shapiro.test(modelo_sarima_2$residuals)
# Pronostico
pronostico_sarima <- forecast(modelo_sarima_2, h=6)
autoplot(pronostico_sarima) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_sarima), series = "Ajuste") +
ggtitle(NULL) +
theme()
# Pronostico
pronostico_sarima <- forecast(modelo_sarima_2, h=6)
autoplot(pronostico_sarima) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_sarima), series = "Ajuste") +
ggtitle(NULL) +
theme()
tail(viviendas_ts$mes, 6)
viviendas_ts
viviendas_ts
viviendas_ts$mes
tail(viviendas_ts, 6)
View(viviendas_componentes)
View(viviendas_df)
pronostico_sarima
xtable(pronostico_sarima)
View(pronostico_sarima)
pronostico_sarima[["lower"]]
as.vector(pronostico_sarima[["lower"]])
ultimo_mes_fecha <- as.yearmon(tail(viviendas_ts$mes, 1), "%Y-%m")
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$mes, 1), "%Y-%m")
View(viviendas_df)
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
View(viviendas_df)
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
passenger_df <- rbind(passenger_df, data.frame(mes = as.character(nuevas_fechas, "%Y-%m"), pasajeros = NA))
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
viviendas_df <- rbind(viviendas_df, data.frame(mes = as.character(nuevas_fechas, "%Y-%m"), viviendas = NA))
viviendas_df <- rbind(viviendas_df, data.frame(fecha = as.character(nuevas_fechas, "%Y-%m"), viviendas = NA))
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
viviendas_df <- rbind(viviendas_df, data.frame(fecha = as.character(nuevas_fechas, "%Y-%m"), viviendas = NA))
nuevas_fechas
as.character(nuevas_fechas, "%Y-%m")
viviendas_df <- rbind(viviendas_df, data.frame(fecha = as.Date(nuevas_fechas, "%Y-%m-%d"), viviendas = NA))
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
viviendas_df <- rbind(viviendas_df, data.frame(fecha = as.Date(nuevas_fechas, "%Y-%m-%d"), viviendas = NA))
as.Date(nuevas_fechas, "%Y-%m-%d")
tail(viviendas_df$fecha, 1)
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
nuevas_fechas
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:7]
viviendas_df <- rbind(viviendas_df, data.frame(fecha = nuevas_fechas, viviendas = NA))
tail(passenger_df$mes, 6)
tail(viviendas_df$fecha, 6)
pronostico_sarima
pronostico_sarima$mean
as.vector(pronostico_sarima$mean)
round(as.vector(pronostico_sarima$mean),2)
as.vector(pronostico_sarima$lower)
as.vector(pronostico_sarima$lower)[,6]
round(as.vector(pronostico_sarima$lower)[:6,]
round(as.vector(pronostico_sarima$lower)[1:6,]
as.vector(pronostico_sarima$lower)[1:6,]
round(as.vector(pronostico_sarima$lower)[1:6], 2)
pronostico_sarima
round(tail(as.vector(pronostico_sarima$lower), 6), 2)
pronosticos <- data.frame(
mes = tail(viviendas_df$fecha, 6),
viviendas = round(as.vector(pronostico_sarima$mean),2),
Lo_80 = round(as.vector(pronostico_sarima$lower)[1:6], 2),
Hi_80 = round(as.vector(pronostico_sarima$upper)[1:6], 2),
Lo_95 = round(tail(as.vector(pronostico_sarima$lower), 6), 2),
Hi_95 = round(tail(as.vector(pronostico_sarima$upper), 6), 2),
)
pronosticos <- data.frame(
mes = tail(viviendas_df$fecha, 6),
viviendas = round(as.vector(pronostico_sarima$mean), 2),
Lo_80 = round(head(as.vector(pronostico_sarima$lower), 6), 2),
Hi_80 = round(head(as.vector(pronostico_sarima$upper), 6), 2),
Lo_95 = round(tail(as.vector(pronostico_sarima$lower), 6), 2),
Hi_95 = round(tail(as.vector(pronostico_sarima$upper), 6), 2)
)
xtable(pronosticos)
pronosticos
# Leyendo datos desde un archivo Excel
viviendas_df <- read_excel('Viviendas.xlsx', col_types = c("date", "numeric"))
colnames(viviendas_df) <- tolower(colnames(viviendas_df))
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:7]
viviendas_df <- rbind(viviendas_df, data.frame(fecha = nuevas_fechas, viviendas = NA))
tail(viviendas_df$fecha, 6)
nuevas_fechas
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:8]
nuevas_fechas
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 7)[2:8]
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:7]
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:7]
# Leyendo datos desde un archivo Excel
viviendas_df <- read_excel('Viviendas.xlsx', col_types = c("date", "numeric"))
colnames(viviendas_df) <- tolower(colnames(viviendas_df))
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha, by = "1 month", length.out = 6)[2:7]
nuevas_fechas
ultimo_mes_fecha <- tail(viviendas_df$fecha, 1)
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = "1 month")
nuevas_fechas
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
ultimo_mes_fecha
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 4, by = 1/12)
nuevas_fechas
as.character(nuevas_fechas, "%Y-%m")
ultimo_mes_fecha <- as.yearmon(tail(viviendas_df$fecha, 1), "%Y-%m")
nuevas_fechas <- seq(ultimo_mes_fecha + 1/12, length.out = 6, by = 1/12)
as.character(nuevas_fechas, "%Y-%m")
pronosticos <- data.frame(
mes = as.character(nuevas_fechas, "%Y-%m"),
viviendas = round(as.vector(pronostico_sarima$mean), 2),
Lo_80 = round(head(as.vector(pronostico_sarima$lower), 6), 2),
Hi_80 = round(head(as.vector(pronostico_sarima$upper), 6), 2),
Lo_95 = round(tail(as.vector(pronostico_sarima$lower), 6), 2),
Hi_95 = round(tail(as.vector(pronostico_sarima$upper), 6), 2)
)
xtable(pronosticos)
pronosticos
pronostico_sarima
xtable(pronosticos)
autoplot(pronostico_sarima) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_sarima), series = "Ajuste") +
ggtitle(NULL) +
theme()
#2. Normalidad
shapiro.test(modelo_sarima_2$residuals)
# Pronostico
pronostico_sarima <- forecast(modelo_sarima_2, h=6)
pronostico_sarima
consumo_df <- read_excel('Consumo.xlsx')
colnames(consumo_df) <- tolower(colnames(consumo_df))
consumo_ts <- ts(consumo_df$consumo, start = 1970, frequency=4)
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts)
boxplot(consumo_ts  ~ cycle(consumo_ts))
autoplot(decompose(consumo_ts, type = "mult"))
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts)
autoplot(consumo_ts - consumo_ts$trend)
consumo_ts
autoplot(consumo_ts - decompose(consumo_ts, type = "mult")$trend)
autoplot(consumo_ts - decompose(consumo_ts)$trend)
# Realizar la prueba ADF
adf.test(consumo_ts)
#Identificar Modelo
par(mfrow = c(1,2))
acf(consumo_ts, main = "FAC",ylim=c(-1, 1))
pacf(consumo_ts, main = "FACP",ylim=c(-1, 1))
modelo_ar1 <- arima(consumo_ts, order=c(1,0,0))
modelo_ma1 <- arima(consumo_ts, order=c(0,0,1))
modelo_ma2 <- arima(consumo_ts, order=c(0,0,2))
modelo_arma_1 <- arima(consumo_ts, order=c(1,0,1))
modelo_arma_2 <- arima(consumo_ts, order=c(1,0,2))
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,0,0)", "ARIMA(0,0,1)", "ARIMA(0,0,2)", "ARIMA(1,0,1)", "ARIMA(1,0,2)"),
AIC = c(AIC(modelo_ar1), AIC(modelo_ma1), AIC(modelo_ma2), AIC(modelo_arma_1), AIC(modelo_arma_2)),
BIC = c(BIC(modelo_ar1), BIC(modelo_ma1), BIC(modelo_ma2), BIC(modelo_arma_1), BIC(modelo_arma_2))
)
resumen_tabla
#Pronostico
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Número de Viviendas") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
adf.test(modelo_arma_1$residuals)
#2. Normalidad
shapiro.test(modelo_arma_1$residuals)
#Identificar Modelo
par(mfrow = c(1,2))
acf(consumo_ts, main = "FAC",ylim=c(-1, 1))
pacf(consumo_ts, main = "FACP",ylim=c(-1, 1))
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts)
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts) +
labs(x = "Tiempo", y = "Gasto de Consumo Personal", title = "")
boxplot(consumo_ts  ~ cycle(consumo_ts)) +
labs(x = "Periodo", y = "Gasto de Consumo Personal", title = "")
boxplot(consumo_ts  ~ cycle(consumo_ts)) +
labs(x = "Periodo", y = "Gasto de Consumo Personal", title = "")
boxplot(consumo_ts  ~ cycle(consumo_ts)) +
labs(x = "Periodo", y = "Gasto de Consumo Personal", title = "")
bboxplot(as.numeric(consumo_ts) ~ cycle(consumo_ts),
xlab = "Periodo", ylab = "Gasto de Consumo Personal",
main = "")
consumo_df <- read_excel('Consumo.xlsx')
View(consumo_df)
colnames(consumo_df) <- tolower(colnames(consumo_df))
consumo_ts <- ts(consumo_df$consumo, start = 1970, frequency=4)
consumo_ts
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts) +
labs(x = "Tiempo", y = "Gasto de Consumo Personal", title = "")
boxplot(as.numeric(consumo_ts) ~ cycle(consumo_ts),
xlab = "Periodo", ylab = "Gasto de Consumo Personal",
main = "")
autoplot(decompose(consumo_ts, type = "mult")) +
labs(x = "Tiempo", title = "")
par(mfrow = c(1,2))
acf(consumo_ts, main = "FAC",ylim=c(-1, 1))
pacf(consumo_ts, main = "FACP",ylim=c(-1, 1))
xtable(resumen_tabla)
modelo_ar1 <- arima(consumo_ts, order=c(1,0,0))
modelo_ma1 <- arima(consumo_ts, order=c(0,0,1))
modelo_ma2 <- arima(consumo_ts, order=c(0,0,2))
modelo_arma_1 <- arima(consumo_ts, order=c(1,0,1))
modelo_arma_2 <- arima(consumo_ts, order=c(1,0,2))
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,0,0)", "ARIMA(0,0,1)", "ARIMA(0,0,2)", "ARIMA(1,0,1)", "ARIMA(1,0,2)"),
AIC = c(AIC(modelo_ar1), AIC(modelo_ma1), AIC(modelo_ma2), AIC(modelo_arma_1), AIC(modelo_arma_2)),
BIC = c(BIC(modelo_ar1), BIC(modelo_ma1), BIC(modelo_ma2), BIC(modelo_arma_1), BIC(modelo_arma_2))
)
xtable(resumen_tabla)
#Pronostico
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Gasto de Consumo Personal") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
modelo_ar1 <- arima(consumo_ts, order=c(1,0,0))
modelo_ma1 <- arima(consumo_ts, order=c(0,0,1))
modelo_ar1 <- arima(consumo_ts, order=c(1,0,0))
modelo_ma1 <- arima(consumo_ts, order=c(0,0,1))
modelo_ma2 <- arima(consumo_ts, order=c(0,0,2))
modelo_arma_1 <- arima(consumo_ts, order=c(1,0,1))
modelo_arma_2 <- arima(consumo_ts, order=c(1,0,2))
resumen_tabla <- data.frame(
Modelo = c("ARIMA(1,0,0)", "ARIMA(0,0,1)", "ARIMA(0,0,2)", "ARIMA(1,0,1)", "ARIMA(1,0,2)"),
AIC = c(AIC(modelo_ar1), AIC(modelo_ma1), AIC(modelo_ma2), AIC(modelo_arma_1), AIC(modelo_arma_2)),
BIC = c(BIC(modelo_ar1), BIC(modelo_ma1), BIC(modelo_ma2), BIC(modelo_arma_1), BIC(modelo_arma_2))
)
xtable(resumen_tabla)
#Pronostico
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "Gasto de Consumo Personal") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
tail(consumo_ts,2)
pronostico_arma_1
pronosticos <- data.frame(
año_trimestre = c("2016 Q4", "2017 Q1", "2017 Q2", "2017 Q3", "2017 Q4", "2018 Q1"),
consumo = round(as.vector(pronostico_arma_1$mean), 2),
Lo_80 = round(head(as.vector(pronostico_arma_1$lower), 6), 2),
Hi_80 = round(head(as.vector(pronostico_arma_1$upper), 6), 2),
Lo_95 = round(tail(as.vector(pronostico_arma_1$lower), 6), 2),
Hi_95 = round(tail(as.vector(pronostico_arma_1$upper), 6), 2)
)
pronosticos
pronosticos <- data.frame(
año_trimestre = c("2016 Q4", "2017 Q1", "2017 Q2", "2017 Q3", "2017 Q4", "2018 Q1"),
gasto_consumo_personal = round(as.vector(pronostico_arma_1$mean), 2),
Lo_80 = round(head(as.vector(pronostico_arma_1$lower), 6), 2),
Hi_80 = round(head(as.vector(pronostico_arma_1$upper), 6), 2),
Lo_95 = round(tail(as.vector(pronostico_arma_1$lower), 6), 2),
Hi_95 = round(tail(as.vector(pronostico_arma_1$upper), 6), 2)
)
xtable(pronosticos)
# Análisis exploratorio de datos (EDA)
autoplot(consumo_ts) +
labs(x = "Tiempo", y = "% Cambio en Gasto de Consumo", title = "")
boxplot(as.numeric(consumo_ts) ~ cycle(consumo_ts),
xlab = "Periodo", ylab = "% Cambio en Gasto de Consumo",
main = "")
boxplot(as.numeric(consumo_ts) ~ cycle(consumo_ts),
xlab = "Periodo", ylab = "% Cambio en Gasto de Consumo",
main = "")
autoplot(decompose(consumo_ts, type = "mult")) +
labs(x = "Tiempo", title = "")
par(mfrow = c(1,2))
acf(consumo_ts, main = "FAC",ylim=c(-1, 1))
pacf(consumo_ts, main = "FACP",ylim=c(-1, 1))
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "% Cambio en Gasto de Consumo") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
#2. Normalidad
shapiro.test(modelo_arma_1$residuals)
#Pronostico
pronostico_arma_1 <- forecast(modelo_arma_1, h=6)
autoplot(pronostico_arma_1) +
labs(x = "Tiempo", y = "% Cambio en Gasto de Consumo") +
autolayer(fitted(pronostico_arma_1), series = "Ajuste") +
ggtitle(NULL) +
theme()
